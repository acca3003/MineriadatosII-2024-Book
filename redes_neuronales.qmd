## Revisión de las Redes Neuronales

Vamos a hacer una revisión de las redes neuronales para posteriormente poder abordar los diferentes tipos de redes neuronales que se utilizan en Deep Learning. Algunos de los avances más recientes en varios de los diferentes componentes que forman parte de las redes neuronales están recopilados en (Gu et al. 2017) Las redes neuronales artificiales tienen sus orígenes en el Perceptrón, que fue el modelo creado por Frank Rosenblatt en 1957 y basado en los trabajos que previamente habían realizado Warren McCullon (neurofisiólogo) y Walter Pitts (matemático). El Perceptrón está construido por una neurona artificial cuyas entradas y salida pueden ser datos numéricos, no como pasaba con la neurona de McCulloch y Pitts (eran sólo datos lógicos). Las neuronas pueden tener pesos y además se le aplica una función de activación Sigmoid (a diferencia de la usada anteriormente al Paso binario). En esta neurona nos encontramos que se realizan los siguientes cálculos: $$ z = \sum_{i=1}^{n}w_ix_i+b_i$$ $$\hat{y} = \delta (z)$$

donde representan los datos numéricos de entrada, son los pesos, es el sesgo (bias), es la función de activación y finalmente es el dato de salida. El modelo de perceptrón es el más simple, en el que hay una sola capa oculta con una única neurona. El siguiente paso nos lleva al Perceptrón Multicapa donde ya pasamos a tener más de una capa oculta, y además podemos tener múltiples neuronas en cada capa oculta. Cuando todas las neuronas de una capa están interconectadas con todas las de la siguiente capa estamos ante una red neuronal densamente conectada. A lo largo de las siguientes secciones nos encontraremos con redes en las que no todas las neuronas de una capa se conectan con todas de la siguiente. Veamos como describiríamos ahora los resultados de las capas donde representan los datos de la neurona en la capa ( siendo los valores de entrada), son los pesos en la capa , es el sesgo (bias) en la capa , es la función de activación en la capa (puede que cada capa tenga una función de activación diferente), es el número de neurona de la capa anterior que conectan con la y finalmente es el dato de salida de la capa . Es decir, en cada capa para calcular el nuevo valor necesitamos usar los valores de la capa anterior.

**Aplicaciones de las Redes Neuronales**

Cada día las redes neuronales están más presentes en diferentes campos y ayudan a resolver una gran variedad de problemas. Podríamos pensar que de forma más básica una red neuronal nos puede ayudar a resolver problemas de regresión y clasificación, es decir, podríamos considerarlo como otro modelo más de los existentes que a partir de unos datos de entrada somos capaces de obtener o un dato numérico (o varios) para hacer una regresión (calcular en precio de una vivienda en función de diferentes valores de la misma) o que somos capaces de conseguir que en función de los datos de entrada nos deje clasificada una muestra (decidir si conceder o no una hipoteca en función de diferentes datos del cliente). Si los datos de entrada son imágenes podríamos estar usando las redes neuronales como una forma de identificar esa imagen: • Identificando que tipo de animal es • Identificando que señal de tráfico es • Identificando que tipo de fruta es • Identificando que una imagen es de exterior o interior de una casa • Identificando que es una cara de una persona • Identificando que una imagen radiográfica represente un tumor maligno • Identificando que haya texto en una imagen Luego podríamos pasar a revolver problemas más complejos combinando las capacidades anteriores: • Detectar los diferentes objetos y personas que se encuentran en una imagen • Etiquedado de escenas (aula con alumnos, partido de futbol, etc...) Después podríamos dar el paso al video que lo podríamos considerar como una secuencia de imágenes: • Contar el número de personas que entran y salen de una habitación • Reconocer que es una carretera • Identificar las señales de tráfico • Detectar si alguien lleva un arma • Seguimiento de objetos • Detección de estado/actitud de una persona • Reconocimiento de acciones (interpretar lenguaje de signos, interpretar lenguaje de banderas) • Vehículos inteligentes Si los datos de entrada son secuencias de texto • Sistemas de traducción • Chatbots (resolución de preguntas a usuarios) • Conversión de texto a audio Si los datos de entrada son audios • Sistemas de traducción • Altavoces inteligentes • Conversión de audio a texto

A continuación, pasamos a revisar diferentes elementos de las redes neuronales que suelen ser comunes a todos los tipos de redes neuronales.

**Datos**

Cuando se trabaja con redes neuronales necesitamos representar los valores de las variables de entrada en forma numérica. En una red neuronal todos los datos son siempre numéricos. Esto significa que todas aquellas variables que sean categóricas necesitamos convertirlas en numéricas. Además, es muy conveniente normalizar los datos para poder trabajar con valores entre 0 y 1, que van a ayudar a que sea más fácil que se pueda converger a la solución. Es importante que los datos seán números en coma flotante, sobre todo si se van a trabajar con GPUs (Graphics Process Units), ya que permitirán hacer un mejor uso de los multiples cores que les permiten operar en coma flotante de forma paralela. Actualmente, hay toda una serie de mejoras en las GPUs que permite aumentar el rendimiento de las redes neuronales como son el uso de operaciones en FP16 (Floating Point de 16 bits en lugar de 32) de forma que pueden hacer dos operaciones de forma simultánea (el formato estándar es FP32) y además con la reducción de memoria (punto muy importante) al meter en los 32 bits 2 datos en lugar de sólo uno. También se han añadido técnicas de Mixed Precision (Narang et al. 2018), los Tensor Cores (para las gráficas de NVIDIA) son otra de las mejoras que se han ido incorporando a la GPUs y que permiten acelerar los procesos tanto de entrenamiento como de predicción con las redes neuronales.

El primer objetivo será convertir las variables categóricas en variables numéricas, de forma que el AE pueda trabajar con ellas. Para realizar la conversión de categórica a numérica básicamente tenemos dos métodos para realizarlo: • Codificación one-hot. • Codificación entera. La codificación one-hot consiste en crear tantas variables como categorías tenga la variable, de forma que se asigna el valor 1 si tiene esa categoría y el 0 si no la tiene.

La codificación entera lo que hace es codificar con un número cada categoría. Realmente esta asignación no tiene ninguna interpretación numérica ya que en general las categorías no tienen porque representar un orden al que asociarlas. Normalmente se trabaja con codificación one-hot para representar los datos categóricos de forma que será necesario preprocesar los datos de partida para realizar esta conversión, creando tantas variables como categorías haya por cada variable. Si nosotros tenemos nuestra muestra de datos de que tiene variables de forma que , y son variables categóricas que tienen número de categorías respectivamente, tendremos finalmente las siguientes variables sólo numéricas:

De esta forma, se aumentarán el número de variables con las que vamos a trabajar en función de las categorías que tengan las variables categóricas. Normalmente nos encontramos que en una red neuronal las variables de salida son: • un número (regresión) • una serie de números (regresión múltiple) • un dato binario (clasificación binaria) • una serie de datos binarios que representa una categoría de varias (clasifiación múltiple)

**Arquitectura de red**

Para la construcción de una red neuronal necesitamos definir la arquitectura de esa red. Esta arquitectura, si estamos pensando en una red neuronal densamente conectada, estará definida por la cantidad de capas ocultas y el número de neuronas que tenemos en cada capa. Más adelante veremos que dependiendo del tipo de red neuronal podrá haber otro tipo de elementos en estas capas. Función de coste y pérdida Otro de los elementos clave que tenemos que tener en cuenta a la hora de usar nuestra red neuronal son las funciones de pérdida y funciones de coste (objetivo). La función de pérdida va a ser la fución que nos dice cómo de diferente es el resultado del dato que nosotros queríamos conseguir respecto al dato original. Normalmente se suelen usar diferentes tipos de funciones de pérdida en función del tipo de resultado con el que se vaya a trabajar. La función de coste es la función que vamos a tener que optimizar para conseguir el mínimo valor posible, y que recoge el valor de la función de pérdida para toda la muestra. Tanto las funciones de pérdida como las funciones de coste, son funciones que devuelven valores de .

Si tenemos un problema de regresión en el que tenemos que predecir un valor o varios valores numéricos, algunas de las funciones a usar son: • Error medio cuadrático () \[120\] , es el valor real e es el valor predicho • Error medio absoluto () \[121\] , es el valor real e es el valor predicho Para los problemas de clasifiación: • Binary Crossentropy (Sólo hay dos clases) \[122\] es el valor real e es el valor predicho • Categorical Crosentropy (Múltiples clases representadas como one-hot) \[123\] es el valor real para la clase e es el valor predicho para la clase • Sparse Categorical Crossentropy (Múltiples clases representadas como un entero) \[124\] es el valor real para la clase e es el valor predicho para la clase • Kullback-Leibler Divergence Esta función se usa para calcular la diferencia entre dos distribuciones de probabilidad y se usa por ejemplo en algunas redes como Variational Autoencoders (Doersch 2016) o Modelos GAN (Generative Adversarial Networks) \[125\] \[126\] \[127\] • Hinge Loss \[128\] Las correspondientes funciones de coste que se usarían, estarían asociadas a todas las muestras que se estén entrenando o sus correpondientes batch, así como posibles términos asociados a la regularización para evitar el sobreajuste del entrenamiento. Es decir, la función de pérdida se calcula para cada muestra, y la función de coste es la media de todas las muestras. Por ejemplo, para el Error medio cuadrático () tendríamos el siguiente valor: \[129\]

**Optimizador**

El Descenso del gradiente es la versión más básica de los algoritmos que permiten el aprendizaje en la red neuronal haciendo el proceso de backpropagation (propagación hacia atrás). A continuación veremos una breve explicación del algoritmo así como algunas variantes del mismo recogidas en (Ruder 2017) Recordamos que el descenso del gradiente nos permitirá actualizar los parámetros de la red neuronal cada vez que demos una pasada hacia delante con todos los datos de entrada, volviendo con una pasada hacia atrás. \[130\] donde es la función de coste, es el parámetro de ratio de aprendizaje que permite definir como de grandes se quiere que sean los pasos en el aprendizaje. Cuando lo que hacemos es actualizar los parámetros para cada pasada hacia delante de una sola muestra, estaremos ante lo que llamamos Stochastic Gradient Descent (SGD). En este proceso convergerá en menos iteraciones, aunque puede tener alta varianza en los parámetros. \[131\] donde e son los valores en la pasada de la muestra . Podemos buscar un punto intermedio que sería cuando trabajamos por lotes y cogemos un bloque de datos de la muestra, les aplicamos la pasada hacia delante y aprendemos los parámetros para ese bloque. En este caso lo llamaremos Mini-batch Gradient Descent \[132\] donde son los valores de ese batch . En general a estos métodos nos referiremos a ellos como SGD. Sobre este algoritmo base se han hecho ciertas mejoras como: **Learning rate decay** Podemos definir un valor de decenso del ratio de aprendizaje, de forma que normalmente al inicio de las iteraciones de la red neuronal los pasos serán más grandes, pero conforme nos acercamos a la solución optima deberemos dar pasos más pequeños para ajustarnos mejor. \[133\] donde ahora se irá reduciendo en función del valor del decay Momentum El **momentum** se introdujo para suavizar la convergencia y reducir la alta varianza de SGD. \[134\] \[135\] donde es lo que se llama el vector velocidad con la dirección correcta. **NAG (Nesterov Accelerated Gradient)** Ahora daremos un paso más con el NAG, calculando la función de coste junto con el vector velocidad. \[136\] \[137\] donde ahora vemos que la función de coste se calcula usando los parámetros de sumado a

Veamos algunos algoritmos de optimización más que, aunque provienen del SGD, se consideran independientes a la hora de usarlos y no como parámetros extras del SGD. **Adagrad (Adaptive Gradient)** Esta variante del algoritmo lo que hace es adaptar el ratio de aprendizaje para cada uno de los pesos en lugar de que sea global para todos. \[138\] donde tenemos que es una matriz diagonal donde cada elemento es la suma de los cuadrados de los gradientes en el paso , y es un término de suavizado par evitar divisiones por 0.

**RMSEProp (Root Mean Square Propagation)** En este caso tenemos una variación del Adagrad en el que intenta reducir su agresividad reduciendo monotonamente el ratio de aprendizaje. En lugar de usar el gradiente acumulado desde el principio de la ejecución, se restringe a una ventana de tamaño fijo para los últimos n gradientes calculando su media. Así calcularemos primero la media en ejecución de los cuadros de los gradientes como: \[139\] y luego ya pasaremos a usar este valor en la actualización \[140\]

**AdaDelta**

Aunque se desarrollaron de forma simultánea el AdaDelta y el RMSProp son muy parecidos en su primer paso incial, llegando el de AdaDelta un poco más lejos en su desarrollo. \[141\] y luego ya pasaremos a usar este valor en la actualización \[142\] \[143\] **Adam (Adaptive Moment Estimation)** \[144\] \[145\] \[146\] donde y son estimaciones del primer y segundo momento de los gradientes respectivamente, y y parámetros a asignar. \[147\] \[148\] \[149\] **Adamax** \[150\] \[151\] \[152\] \[153\] donde y son estimaciones del primer y segundo momento de los gradientes respectivamente, y y parámetros a asignar. \[154\] \[155\] **Nadam (Nesterov-accelerated Adaptive Moment Estimatio)** Combina Adam y NAG. \[156\] \[157\] \[158\]

**Función de activación** Las funciones de activación dentro de una red neuronal son uno de los elementos clave en el diseño de la misma. Cada tipo de función de activación podrá ayudar a la convergencia de forma más o menos rápida en función del tipo de problema que se plantee. En un AE las funciones de activación en las capas ocultas van a conseguir establecer las restricciones no lineales al pasar de una capa a la siguiente, normalmente se evita usar la función de activación lineal en las capas intermedias ya que queremos conseguir transformaciones no lineales. A continuación, exponemos las principales funciones de activación que mejores resultados dan en las capas ocultas: • Paso binario (Usado por los primeros modelos de neuronas) \[159\] • Identidad \[160\] • Sigmoid (Logística) \[161\] • Tangente Hiperbólica (Tanh) \[162\] • Softmax \[163\]

```         
• ReLu ( Rectified Linear Unit)
    [164]

• LReLU (Leaky Rectified Linear Unit)
    [165]
• PReLU (Parametric Rectified Linear Unit)
    [166]
• RReLU (Randomized Rectified Linear Unit)
    [167]
```

\*La diferencia entre LReLu, PReLu y RRLeLu es que en LReLu el parámetro es uno que se asigna fijo, en el caso de PReLu el parámetro también se aprende durante el entrenamiento y finalmente en RReLu es un parámetro con valores entre 0 y 1, que se obtiene de un muestreo en una distribución normal. Se puede profundizar en este grupo de funciones de activación en (Xu et al. 2015) • ELU (Exponential Linear Unit) \[168\] FIGURA nº 64: COMPARACIÓN ENTRE LAS FUNCIONES ReLU, LReLU/PReLU, RReLU y ELU

FUENTE: Jiuxiang, G. et al (2019)

**Función de activación en salida** En la capa de salida tenemos que tener en cuenta cual es el tipo de datos final que queremos obtener, y en función de eso elegiremos cual es la función de activación de salida que usaremos. Normalmente las funciones de activación que se usarán en la última capa seran: • Lineal con una unidad, para regresión de un solo dato numérico \[169\] donde es un valor escalar. • Lineal con multiples unidades, para regresión de varios datos numéricos \[170\] donde es un vector. • Sigmoid para clasifiación binaria \[171\] • Softmax para calsifiación múltiple \[172\]

**Regularización** Las técnicas de regularización nos permiten conseguir mejorar los problemas que tengamos por sobreajuste en el entrenamiento de nuestra red neuronal. A continuación, vemos algunas de las técnicas de regularización existentes en la actualidad: • Norma LP Básicamente estos métodos tratan de hacer que los pesos de las neuronas tengan valores muy pequeños consiguiendo una distribución de pesos más regular. Esto lo consiguen al añadir a la función de pérdida un coste asociado a tener pesos grandes en las neuronas. Este peso se puede construir o bien con la norma L1 (proporcional al valor absoluto) o con la norma L2 (proporcional al cuadrado de los coeficientes de los pesos). En general se define la norma LP) \[173\] \[174\] Para los casos más habituales tendríamos la norma L1 y L2. \[175\] \[176\]

**Dropout** Una de las técnicas de regularización que más se están usando actualmente es la llamada Dropout, su proceso es muy sencillo y consiste en que en cada iteración de forma aleatoria se dejan de usar un porcentaje de las neuronas de esa capa, de esta forma es más dificil conseguir un sobreajuste porque las neuronas no son capaces de memorizar parte de los datos de entrada. **Dropconnect** El Dropconnect es otra técnica que va un poco más allá del concepto de Dropout y en lugar de usar en cada capa de forma aleatoria una serie de neuronas, lo que se hace es que de forma aleatoria se ponen los pesos de la capa a cero. Es decir, lo que hacemos es que hay ciertos enlaces de alguna neurona de entrada con alguna de salida que no se activan.

**Inicialización de pesos**

Cuando empieza el entrenamiento de una red neuronal y tiene que realizar la primera pasada hacia delante de los datos, necesitamos que la red neuronal ya tenga asignados algún valor a los pesos. Se pueden hacer inicializaciones del tipo: • Ceros Todos los pesos se inicializan a 0. • Unos Todos los pesos se inicializan a 1. • Distribución normal Los pesos se inicializan con una distribución normal, normalmente con media 0 y una desviación alrededor de 0,05. Es decir, valores bastante cercanos al cero. • Distribución normal truncada Los pesos se inicializan con una distribución normal, normalmente con media 0 y una desviación alrededor de 0,05 y además se truncan con un máximo del doble de la desviación. Los valores aun són más cercanos a cero. • Distribución uniforme Los pesos se inicializan con una distribución uniforme, normalmente entre el 0 y el 1. • Glorot Normal (También llamada Xavier normal) Los pesos se inicializan partiendo de una distribución normal truncada en la que la desivación es donde es el número de unidades de entrada y fanout es el número de unidades de salida. Ver (Glorot and Bengio 2010) • Glorot Uniforme (También llamada Xavier uniforme) Los pesos se inicializan partiendo de una distribución uniforme done los límites son done y es el número de unidades de entrada y fanout es el número de unidades de salida. Ver (Glorot and Bengio 2010)

**Batch normalization** Hemos comentado que cuando entrenamos una red neuronal los datos de entrada deben ser todos de tipo numérico y además los normalizamos para tener valores "cercanos a cero", teniendo una media de 0 y varianza de 1, consiguiendo uniformizar todas las variables y conseguir que la red pueda converger más fácilmente. Cuando los datos entran a la red neuronal y se comienza a operar con ellos, se convierten en nuevos valores que han perdido esa propiedad de normalización. Lo que hacemos con la normalización por lotes (batch normalization) (Ioffe and Szegedy 2015) es que añadimos un paso extra para normalizar las salidas de las funciones de activación. Lo normal es que se aplicara la normalización con la media y la varianza de todo el bloque de entrenamiento en ese paso, pero normalmente estaremos trabajando por lotes y se calculará la media y varianza con ese lote de datos.
